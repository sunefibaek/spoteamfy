{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spoteamfy","text":"<p>A Python CLI tool that fetches recently played Spotify tracks and posts them as rich adaptive cards to Microsoft Teams channels.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fetches recently played tracks from Spotify</li> <li>Displays album cover art from the most recent track</li> <li>Creates interactive adaptive cards for Teams</li> <li>Supports multiple Spotify users</li> <li>Clickable Spotify links for each track</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Configure credentials in <code>config/users.json</code></li> <li>Set webhook URL in <code>.env</code> file: <code>WEBHOOK_URL=https://your-teams-webhook</code></li> <li>Run the CLI:    <code>bash    python -m spoteamfy.src.cli --num-tracks 5</code></li> </ol> <p>See the CLI guide for detailed usage instructions.</p>"},{"location":"cli/","title":"CLI","text":"<p>The Spoteamfy CLI fetches recently played tracks from Spotify for configured users and posts formatted adaptive cards to Microsoft Teams via webhook.</p>"},{"location":"cli/#usage","title":"Usage","text":"<pre><code>python -m spoteamfy.src.cli [OPTIONS]\n</code></pre>"},{"location":"cli/#options","title":"Options","text":"Option Type Default Description <code>--num-tracks</code> INTEGER 5 Number of recently played tracks to fetch per user (max 50) <code>--users-json</code> PATH <code>./config/users.json</code> Path to JSON file with user credentials. Must exist. <code>--teams-webhook</code> TEXT Environment variable Teams webhook URL for posting track info"},{"location":"cli/#configuration-priority","title":"Configuration Priority","text":""},{"location":"cli/#users-json-file","title":"Users JSON File","text":"<ol> <li><code>--users-json</code> CLI argument</li> <li><code>USERS_JSON_PATH</code> environment variable</li> <li><code>./config/users.json</code> (default)</li> </ol>"},{"location":"cli/#teams-webhook-url","title":"Teams Webhook URL","text":"<ol> <li><code>--teams-webhook</code> CLI argument</li> <li><code>WEBHOOK_URL</code> environment variable</li> <li>Error if neither provided</li> </ol>"},{"location":"cli/#examples","title":"Examples","text":""},{"location":"cli/#basic-usage-uses-defaults","title":"Basic usage (uses defaults)","text":"<pre><code>python -m spoteamfy.src.cli\n</code></pre>"},{"location":"cli/#fetch-10-tracks-with-custom-webhook","title":"Fetch 10 tracks with custom webhook","text":"<pre><code>python -m spoteamfy.src.cli --num-tracks 10 --teams-webhook \"https://your-webhook-url\"\n</code></pre>"},{"location":"cli/#custom-users-file","title":"Custom users file","text":"<pre><code>python -m spoteamfy.src.cli --users-json \"/path/to/users.json\" --num-tracks 3\n</code></pre>"},{"location":"cli/#environment-setup","title":"Environment Setup","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code>USERS_JSON_PATH=./config/users.json\nWEBHOOK_URL=https://your-teams-webhook-url\n</code></pre>"},{"location":"cli/#output","title":"Output","text":"<p>The CLI creates adaptive cards with: - Album cover art from the most recent track - Track list with clickable Spotify links - User-friendly formatting for Teams channels</p>"},{"location":"cli/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code> - Success (even if some posts fail)</li> <li>Errors are reported but don't cause exit code changes</li> </ul>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#main-modules","title":"Main modules","text":""},{"location":"reference/#cli_1","title":"Cli","text":""},{"location":"reference/#cli.fetch_recently_played","title":"<code>fetch_recently_played(spotify_client, num_tracks=5)</code>","text":"<p>Fetch recently played tracks for a user using spotipy.</p> <p>Parameters:</p> Name Type Description Default <code>spotify_client</code> <code>Spotify</code> <p>Authenticated spotipy client.</p> required <code>num_tracks</code> <code>int</code> <p>Number of tracks to fetch (max 50). Defaults to 5.</p> <code>5</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of track dictionaries with relevant information including</p> <code>List[Dict]</code> <p>name, artist, album, popularity, external_urls, preview_url,</p> <code>List[Dict]</code> <p>played_at timestamp, and album_cover_url.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the Spotify API request fails or returns invalid data.</p> Source code in <code>spoteamfy/src/cli.py</code> <pre><code>def fetch_recently_played(\n    spotify_client: spotipy.Spotify, num_tracks: int = 5\n) -&gt; List[Dict]:\n    \"\"\"Fetch recently played tracks for a user using spotipy.\n\n    Args:\n        spotify_client: Authenticated spotipy client.\n        num_tracks: Number of tracks to fetch (max 50). Defaults to 5.\n\n    Returns:\n        A list of track dictionaries with relevant information including\n        name, artist, album, popularity, external_urls, preview_url,\n        played_at timestamp, and album_cover_url.\n\n    Raises:\n        Exception: If the Spotify API request fails or returns invalid data.\n    \"\"\"\n    try:\n        # Use spotipy's current_user_recently_played method\n        results = spotify_client.current_user_recently_played(\n            limit=min(num_tracks, 50)  # Spotify API limit is 50\n        )\n\n        tracks = []\n        # Remove duplicates while preserving order (same song played multiple times)\n        seen_tracks = set()\n\n        for item in results[\"items\"]:\n            track = item[\"track\"]\n            track_id = track[\"id\"]\n\n            # Skip if we've already seen this track (to avoid duplicates)\n            if track_id not in seen_tracks:\n                seen_tracks.add(track_id)\n\n                # Get album cover art (use the medium size if available)\n                album_cover_url = None\n                if track[\"album\"][\"images\"]:\n                    # Spotify provides images in descending size order\n                    # Try to get a medium-sized image (around 300px)\n                    for image in track[\"album\"][\"images\"]:\n                        if image[\"height\"] &gt;= 300:\n                            album_cover_url = image[\"url\"]\n                        elif not album_cover_url:  # fallback to any available image\n                            album_cover_url = image[\"url\"]\n\n                track_info = {\n                    \"name\": track[\"name\"],\n                    \"artist\": \", \".join(\n                        [artist[\"name\"] for artist in track[\"artists\"]]\n                    ),\n                    \"album\": track[\"album\"][\"name\"],\n                    \"popularity\": track[\"popularity\"],\n                    \"external_urls\": track[\"external_urls\"][\"spotify\"],\n                    \"preview_url\": track[\"preview_url\"],\n                    \"played_at\": item[\"played_at\"],  # When it was played\n                    \"album_cover_url\": album_cover_url,  # Album cover art\n                }\n                tracks.append(track_info)\n\n                # Stop when we have enough unique tracks\n                if len(tracks) &gt;= num_tracks:\n                    break\n\n        return tracks\n\n    except Exception as e:\n        raise Exception(f\"Failed to fetch recently played tracks: {e}\")\n</code></pre>"},{"location":"reference/#cli.format_tracks_for_teams","title":"<code>format_tracks_for_teams(username, tracks)</code>","text":"<p>Format track information as an adaptive card for Teams webhook.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Spotify username to include in the message.</p> required <code>tracks</code> <code>List[Dict]</code> <p>List of track dictionaries to format.</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>A Teams message payload dictionary with an adaptive card containing</p> <code>Dict</code> <p>formatted track information and album cover art from the most recent track.</p> <code>Dict</code> <p>If no tracks are provided, returns a simple message card.</p> Source code in <code>spoteamfy/src/cli.py</code> <pre><code>def format_tracks_for_teams(username: str, tracks: List[Dict]) -&gt; Dict:\n    \"\"\"Format track information as an adaptive card for Teams webhook.\n\n    Args:\n        username: Spotify username to include in the message.\n        tracks: List of track dictionaries to format.\n\n    Returns:\n        A Teams message payload dictionary with an adaptive card containing\n        formatted track information and album cover art from the most recent track.\n        If no tracks are provided, returns a simple message card.\n    \"\"\"\n    if not tracks:\n        return {\n            \"type\": \"message\",\n            \"attachments\": [\n                {\n                    \"contentType\": \"application/vnd.microsoft.card.adaptive\",\n                    \"content\": {\n                        \"type\": \"AdaptiveCard\",\n                        \"version\": \"1.3\",\n                        \"body\": [\n                            {\n                                \"type\": \"TextBlock\",\n                                \"text\": f\"No recently played tracks found for {username}\",  # noqa: E501\n                                \"weight\": \"Bolder\",\n                                \"size\": \"Medium\",\n                                \"color\": \"Attention\",\n                            }\n                        ],\n                    },\n                }\n            ],\n        }\n\n    # Get album cover from the most recent track (first in list)\n    most_recent_track = tracks[0]\n    album_cover_url = most_recent_track.get(\"album_cover_url\")\n\n    # Build the adaptive card body\n    card_body = [\n        {\n            \"type\": \"TextBlock\",\n            \"text\": f\"Recently Played {len(tracks)} Tracks for {username}\",\n            \"weight\": \"Bolder\",\n            \"size\": \"Large\",\n        }\n    ]\n\n    # Add album cover if available\n    if album_cover_url:\n        card_body.append(\n            {\n                \"type\": \"Image\",\n                \"url\": album_cover_url,\n                \"size\": \"Medium\",\n                \"horizontalAlignment\": \"Center\",\n                \"altText\": f\"Album cover for {most_recent_track['album']}\",\n            }\n        )\n        card_body.append(\n            {\n                \"type\": \"TextBlock\",\n                \"text\": f\"Album: {most_recent_track['album']}\",\n                \"size\": \"Small\",\n                \"color\": \"Accent\",\n                \"horizontalAlignment\": \"Center\",\n                \"spacing\": \"None\",\n            }\n        )\n\n    # Add tracks list\n    tracks_container = {\"type\": \"Container\", \"items\": []}\n\n    for i, track in enumerate(tracks, 1):\n        track_item = {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"width\": \"auto\",\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": f\"{i}.\",\n                            \"weight\": \"Bolder\",\n                            \"color\": \"Accent\",\n                        }\n                    ],\n                },\n                {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": f\"**{track['name']}**\",\n                            \"weight\": \"Bolder\",\n                            \"wrap\": True,\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": f\"by {track['artist']}\",\n                            \"size\": \"Small\",\n                            \"color\": \"Default\",\n                            \"spacing\": \"None\",\n                            \"wrap\": True,\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"text\": f\"Album: {track['album']}\",\n                            \"size\": \"Small\",\n                            \"color\": \"Default\",\n                            \"spacing\": \"None\",\n                            \"wrap\": True,\n                        },\n                    ],\n                },\n            ],\n        }\n\n        # Add Spotify link if available\n        if track.get(\"external_urls\"):\n            track_item[\"selectAction\"] = {\n                \"type\": \"Action.OpenUrl\",\n                \"url\": track[\"external_urls\"],\n            }\n\n        tracks_container[\"items\"].append(track_item)\n\n        # Add separator between tracks (except for the last one)\n        if i &lt; len(tracks):\n            tracks_container[\"items\"].append(\n                {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"\",\n                    \"size\": \"Small\",\n                    \"spacing\": \"Small\",\n                }\n            )\n\n    card_body.append(tracks_container)\n\n    # Create the complete adaptive card message\n    return {\n        \"type\": \"message\",\n        \"attachments\": [\n            {\n                \"contentType\": \"application/vnd.microsoft.card.adaptive\",\n                \"content\": {\n                    \"type\": \"AdaptiveCard\",\n                    \"version\": \"1.3\",\n                    \"body\": card_body,\n                    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n                },\n            }\n        ],\n    }\n</code></pre>"},{"location":"reference/#cli.get_users_json_path","title":"<code>get_users_json_path(cli_path=None)</code>","text":"<p>Determine the path to the users.json file.</p> <p>Priority: CLI argument &gt; .env USERS_JSON_PATH &gt; default ./config/users.json</p> <p>Parameters:</p> Name Type Description Default <code>cli_path</code> <code>str</code> <p>Optional path provided via CLI argument.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The resolved path to the users.json file.</p> Source code in <code>spoteamfy/src/cli.py</code> <pre><code>def get_users_json_path(cli_path: str = None) -&gt; str:\n    \"\"\"Determine the path to the users.json file.\n\n    Priority: CLI argument &gt; .env USERS_JSON_PATH &gt; default ./config/users.json\n\n    Args:\n        cli_path: Optional path provided via CLI argument.\n\n    Returns:\n        The resolved path to the users.json file.\n    \"\"\"\n    load_dotenv()\n    if cli_path:\n        return cli_path\n    env_path = os.getenv(\"USERS_JSON_PATH\")\n    if env_path:\n        return env_path\n    return \"./config/users.json\"\n</code></pre>"},{"location":"reference/#cli.get_webhook_url","title":"<code>get_webhook_url(cli_webhook=None)</code>","text":"<p>Determine the webhook URL to use.</p> <p>Priority: CLI argument &gt; .env WEBHOOK_URL &gt; raise error</p> <p>Parameters:</p> Name Type Description Default <code>cli_webhook</code> <code>str</code> <p>Optional webhook URL provided via CLI argument.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The resolved webhook URL.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no webhook URL is provided via CLI or environment variable.</p> Source code in <code>spoteamfy/src/cli.py</code> <pre><code>def get_webhook_url(cli_webhook: str = None) -&gt; str:\n    \"\"\"Determine the webhook URL to use.\n\n    Priority: CLI argument &gt; .env WEBHOOK_URL &gt; raise error\n\n    Args:\n        cli_webhook: Optional webhook URL provided via CLI argument.\n\n    Returns:\n        The resolved webhook URL.\n\n    Raises:\n        ValueError: If no webhook URL is provided via CLI or environment variable.\n    \"\"\"\n    load_dotenv()\n    if cli_webhook:\n        return cli_webhook\n    env_webhook = os.getenv(\"WEBHOOK_URL\")\n    if env_webhook:\n        return env_webhook\n    raise ValueError(\n        \"No webhook URL provided. Use --teams-webhook or set WEBHOOK_URL in .env\"\n    )\n</code></pre>"},{"location":"reference/#cli.load_users_from_json","title":"<code>load_users_from_json(json_path)</code>","text":"<p>Load user credentials from a JSON file.</p> <p>Each user must have: username, client_id, client_secret, redirect_uri, refresh_token.</p> <p>Parameters:</p> Name Type Description Default <code>json_path</code> <code>str</code> <p>Path to the JSON file containing user credentials.</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>A list of dictionaries containing user credential information.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a user entry is missing required keys.</p> <code>FileNotFoundError</code> <p>If the JSON file cannot be found.</p> <code>JSONDecodeError</code> <p>If the JSON file is malformed.</p> Source code in <code>spoteamfy/src/cli.py</code> <pre><code>def load_users_from_json(json_path: str) -&gt; List[Dict]:\n    \"\"\"Load user credentials from a JSON file.\n\n    Each user must have: username, client_id, client_secret,\n    redirect_uri, refresh_token.\n\n    Args:\n        json_path: Path to the JSON file containing user credentials.\n\n    Returns:\n        A list of dictionaries containing user credential information.\n\n    Raises:\n        ValueError: If a user entry is missing required keys.\n        FileNotFoundError: If the JSON file cannot be found.\n        json.JSONDecodeError: If the JSON file is malformed.\n    \"\"\"\n    with open(json_path, \"r\") as f:\n        users = json.load(f)\n    required_keys = {\n        \"username\",\n        \"client_id\",\n        \"client_secret\",\n        \"redirect_uri\",\n        \"refresh_token\",\n    }\n    for user in users:\n        if not required_keys.issubset(user):\n            raise ValueError(f\"User entry missing required keys: {user}\")\n    return users\n</code></pre>"},{"location":"reference/#cli.main","title":"<code>main(num_tracks, users_json, teams_webhook)</code>","text":"<p>CLI entry point for Spotify Teams utility.</p> <p>Fetches recently played tracks from Spotify for configured users and posts formatted messages to Microsoft Teams via webhook.</p> <p>Parameters:</p> Name Type Description Default <code>num_tracks</code> <code>int</code> <p>Number of recently played tracks to fetch per user.</p> required <code>users_json</code> <code>Optional[str]</code> <p>Path to JSON file containing user credentials.</p> required <code>teams_webhook</code> <code>Optional[str]</code> <p>Teams webhook URL for posting messages.</p> required Source code in <code>spoteamfy/src/cli.py</code> <pre><code>@click.command()\n@click.option(\n    \"--num-tracks\",\n    default=5,\n    help=\"Number of recently played tracks to fetch per user (max 50).\",\n)\n@click.option(\n    \"--users-json\",\n    required=False,\n    type=click.Path(exists=True),\n    help=(\n        \"Path to JSON file with user credentials. \"\n        \"Defaults to .env USERS_JSON_PATH or ./config/users.json.\"\n    ),\n)\n@click.option(\n    \"--teams-webhook\",\n    required=False,\n    help=\"Teams webhook URL for posting track info. Defaults to .env WEBHOOK_URL.\",\n)\ndef main(\n    num_tracks: int,\n    users_json: Optional[str],\n    teams_webhook: Optional[str],\n) -&gt; None:\n    \"\"\"CLI entry point for Spotify Teams utility.\n\n    Fetches recently played tracks from Spotify for configured users\n    and posts formatted messages to Microsoft Teams via webhook.\n\n    Args:\n        num_tracks: Number of recently played tracks to fetch per user.\n        users_json: Path to JSON file containing user credentials.\n        teams_webhook: Teams webhook URL for posting messages.\n    \"\"\"\n    users_json_path = get_users_json_path(users_json)\n\n    try:\n        webhook_url = get_webhook_url(teams_webhook)\n    except ValueError as e:\n        click.echo(f\"Error: {e}\", err=True)\n        return\n\n    click.echo(\n        f\"Fetching {num_tracks} recently played tracks per user from \"\n        f\"{users_json_path} and posting to Teams.\"\n    )\n\n    try:\n        users = load_users_from_json(users_json_path)\n        click.echo(f\"Loaded user credentials for {len(users)} users.\")\n    except Exception as e:\n        click.echo(f\"Error loading users: {e}\", err=True)\n        return\n\n    successful_posts = 0\n    failed_posts = 0\n\n    for user in users:\n        username = user.get(\"username\", \"&lt;unknown&gt;\")\n        click.echo(f\"\\nProcessing user: {username}\")\n\n        try:\n            # Authenticate user using spotipy\n            spotify_client = authenticate_user(user)\n            click.echo(f\"\u2713 Authentication successful for {username}\")\n\n            # Fetch recently played tracks\n            tracks = fetch_recently_played(spotify_client, num_tracks)\n            click.echo(f\"\u2713 Fetched {len(tracks)} recently played tracks for {username}\")\n\n            # Format message for Teams\n            message = format_tracks_for_teams(username, tracks)\n\n            # Post to Teams\n            if post_to_teams(webhook_url, message):\n                click.echo(f\"\u2713 Posted tracks for {username} to Teams\")\n                successful_posts += 1\n            else:\n                click.echo(f\"\u2717 Failed to post tracks for {username} to Teams\")\n                failed_posts += 1\n\n        except SpotifyAuthError as e:\n            click.echo(f\"\u2717 Authentication failed for {username}: {e}\", err=True)\n            failed_posts += 1\n        except Exception as e:\n            click.echo(f\"\u2717 Error processing {username}: {e}\", err=True)\n            failed_posts += 1\n\n    # Summary\n    click.echo(\"\\n=== Summary ===\")\n    click.echo(f\"Successful posts: {successful_posts}\")\n    click.echo(f\"Failed posts: {failed_posts}\")\n    click.echo(f\"Total users processed: {len(users)}\")\n</code></pre>"},{"location":"reference/#cli.post_to_teams","title":"<code>post_to_teams(webhook_url, message)</code>","text":"<p>Post message to Microsoft Teams using webhook.</p> <p>Parameters:</p> Name Type Description Default <code>webhook_url</code> <code>str</code> <p>Teams webhook URL to post to.</p> required <code>message</code> <code>Dict</code> <p>Message payload dictionary to send.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the message was posted successfully, False otherwise.</p> Source code in <code>spoteamfy/src/cli.py</code> <pre><code>def post_to_teams(webhook_url: str, message: Dict) -&gt; bool:\n    \"\"\"Post message to Microsoft Teams using webhook.\n\n    Args:\n        webhook_url: Teams webhook URL to post to.\n        message: Message payload dictionary to send.\n\n    Returns:\n        True if the message was posted successfully, False otherwise.\n    \"\"\"\n    try:\n        response = requests.post(\n            webhook_url, json=message, headers={\"Content-Type\": \"application/json\"}\n        )\n        response.raise_for_status()\n        return True\n    except requests.RequestException as e:\n        click.echo(f\"Failed to post to Teams: {e}\", err=True)\n        return False\n</code></pre>"},{"location":"reference/#spotify-auth","title":"Spotify auth","text":""},{"location":"reference/#spotify_auth.SpotifyAuthError","title":"<code>SpotifyAuthError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Custom exception for Spotify authentication errors.</p> Source code in <code>spoteamfy/src/spotify_auth.py</code> <pre><code>class SpotifyAuthError(Exception):\n    \"\"\"Custom exception for Spotify authentication errors.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/#spotify_auth.authenticate_user","title":"<code>authenticate_user(user_credentials)</code>","text":"<p>Authenticate a Spotify user using Spotipy and return a Spotipy client instance.</p> <p>Parameters:</p> Name Type Description Default <code>user_credentials</code> <code>Dict[str, Any]</code> <p>Dictionary containing user authentication credentials. Must include 'client_id', 'client_secret', 'redirect_uri', and 'refresh_token' keys.</p> required <p>Returns:</p> Type Description <code>Spotify</code> <p>An authenticated spotipy.Spotify client instance.</p> <p>Raises:</p> Type Description <code>SpotifyAuthError</code> <p>If authentication fails due to invalid credentials, missing required fields, or API errors.</p> Source code in <code>spoteamfy/src/spotify_auth.py</code> <pre><code>def authenticate_user(user_credentials: Dict[str, Any]) -&gt; spotipy.Spotify:\n    \"\"\"Authenticate a Spotify user using Spotipy and return a Spotipy client instance.\n\n    Args:\n        user_credentials: Dictionary containing user authentication credentials.\n            Must include 'client_id', 'client_secret', 'redirect_uri', and\n            'refresh_token' keys.\n\n    Returns:\n        An authenticated spotipy.Spotify client instance.\n\n    Raises:\n        SpotifyAuthError: If authentication fails due to invalid credentials,\n            missing required fields, or API errors.\n    \"\"\"\n    try:\n        # Updated scope to include user-top-read for getting top tracks\n        scope = \"\"\"\n            user-read-recently-played\n            user-top-read\n            playlist-modify-public\n            playlist-modify-private\n        \"\"\"\n\n        sp_oauth = SpotifyOAuth(\n            client_id=user_credentials[\"client_id\"],\n            client_secret=user_credentials[\"client_secret\"],\n            redirect_uri=user_credentials[\"redirect_uri\"],\n            scope=scope,\n            cache_path=None,\n        )\n\n        # Use refresh_token if available\n        if \"refresh_token\" in user_credentials and user_credentials[\"refresh_token\"]:\n            # Check if refresh_token is not a placeholder\n            if user_credentials[\"refresh_token\"].startswith(\"SPOTIFY_REFRESH_TOKEN\"):\n                raise SpotifyAuthError(\n                    \"Refresh token is a placeholder. \"\n                    \"Use get_access_token.py script to get a real refresh token.\"\n                )\n\n            token_info = sp_oauth.refresh_access_token(\n                user_credentials[\"refresh_token\"]\n            )\n            access_token = token_info[\"access_token\"]\n            return spotipy.Spotify(auth=access_token)\n        else:\n            raise SpotifyAuthError(\n                \"Missing or empty refresh_token in user credentials.\"\n            )\n\n    except SpotifyOauthError as e:\n        raise SpotifyAuthError(\n            \"Authentication failed for user \"\n            f\"{user_credentials.get('username', '')}: {e}\"\n        )\n    except KeyError as e:\n        raise SpotifyAuthError(\n            \"Missing required credential field for user \"\n            f\"{user_credentials.get('username', '')}: {e}\"\n        )\n    except Exception as e:\n        raise SpotifyAuthError(\n            \"Unexpected authentication error for user \"\n            f\"{user_credentials.get('username', '')}: {e}\"\n        )\n</code></pre>"},{"location":"reference/#utility-scripts","title":"Utility scripts","text":""},{"location":"reference/#get-access-token","title":"Get access token","text":"<p>Script to fetch Spotify access tokens using spotipy. This script handles both getting initial refresh tokens and refreshing access tokens.</p>"},{"location":"reference/#get_access_token.get_client_credentials_token","title":"<code>get_client_credentials_token(client_id, client_secret)</code>","text":"<p>Get an access token using Client Credentials Flow (app-only, no user context).</p> <p>This is useful for app-only requests but won't work for user-specific data.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Spotify app client ID.</p> required <code>client_secret</code> <code>str</code> <p>Spotify app client secret.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Access token string if successful, None otherwise.</p> Source code in <code>scripts/get_access_token.py</code> <pre><code>def get_client_credentials_token(client_id: str, client_secret: str) -&gt; Optional[str]:\n    \"\"\"Get an access token using Client Credentials Flow (app-only, no user context).\n\n    This is useful for app-only requests but won't work for user-specific data.\n\n    Args:\n        client_id: Spotify app client ID.\n        client_secret: Spotify app client secret.\n\n    Returns:\n        Access token string if successful, None otherwise.\n    \"\"\"\n    try:\n        client_credentials_manager = SpotifyClientCredentials(\n            client_id=client_id, client_secret=client_secret\n        )\n\n        # sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)\n\n        # Test the connection\n        # results = sp.search(q=\"test\", type=\"track\", limit=1)\n\n        print(\"Client Credentials token obtained successfully!\")\n        print(\n            \"Note: This token can only be used for app-only requests, \"\n            \"not user-specific data.\"\n        )\n\n        return client_credentials_manager.get_access_token()\n\n    except Exception as e:\n        print(f\"Error getting Client Credentials token: {e}\")\n        return None\n</code></pre>"},{"location":"reference/#get_access_token.get_initial_auth_for_user","title":"<code>get_initial_auth_for_user(username, client_id, client_secret, redirect_uri)</code>","text":"<p>Get initial authorization for a user using Authorization Code Flow.</p> <p>This will open a browser and require user interaction.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username for display purposes.</p> required <code>client_id</code> <code>str</code> <p>Spotify app client ID.</p> required <code>client_secret</code> <code>str</code> <p>Spotify app client secret.</p> required <code>redirect_uri</code> <code>str</code> <p>Redirect URI configured in Spotify app.</p> required <p>Returns:</p> Type Description <code>Optional[Dict]</code> <p>Token info dictionary containing access_token, refresh_token, expires_at,</p> <code>Optional[Dict]</code> <p>and scope if successful, None otherwise.</p> Source code in <code>scripts/get_access_token.py</code> <pre><code>def get_initial_auth_for_user(\n    username: str, client_id: str, client_secret: str, redirect_uri: str\n) -&gt; Optional[Dict]:\n    \"\"\"Get initial authorization for a user using Authorization Code Flow.\n\n    This will open a browser and require user interaction.\n\n    Args:\n        username: The username for display purposes.\n        client_id: Spotify app client ID.\n        client_secret: Spotify app client secret.\n        redirect_uri: Redirect URI configured in Spotify app.\n\n    Returns:\n        Token info dictionary containing access_token, refresh_token, expires_at,\n        and scope if successful, None otherwise.\n    \"\"\"\n    # Updated scope to include all required permissions\n    scope = \"\"\"\n        user-top-read\n        playlist-modify-public\n        playlist-modify-private\n        user-read-recently-played\n    \"\"\"\n\n    # Create SpotifyOAuth object\n    sp_oauth = SpotifyOAuth(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=redirect_uri,\n        scope=scope,\n        show_dialog=True,  # Force show dialog even if user previously authorized\n        cache_path=None,  # Don't use file-based cache\n    )\n\n    print(f\"Getting authorization for user: {username}\")\n\n    # Get authorization URL\n    auth_url = sp_oauth.get_authorize_url()\n    print(\"Please go to this URL to authorize the application:\")\n    print(f\"{auth_url}\")\n\n    # Get the redirect URL from user input\n    redirect_response = input(\"\\nPaste the full redirect URL here: \").strip()\n\n    try:\n        # Extract code from redirect URL\n        code = sp_oauth.parse_response_code(redirect_response)\n        if code:\n            token_info = sp_oauth.get_access_token(code, as_dict=False)\n\n            # Convert to dict format for compatibility\n            if isinstance(token_info, str):\n                # If it returns just the token string, we need to get the full\n                # token info.\n                # Use get_cached_token to get the full token info\n                full_token_info = sp_oauth.get_cached_token()\n                if full_token_info:\n                    token_info = full_token_info\n                else:\n                    print(\"Failed to get full token info\")\n                    return None\n\n            if token_info and isinstance(token_info, dict):\n                print(\"\\n=== SUCCESS ===\")\n                print(f\"Access Token: {token_info['access_token'][:20]}...\")\n                print(f\"Refresh Token: {token_info['refresh_token']}\")\n                print(f\"Expires at: {token_info['expires_at']}\")\n                print(f\"Scope: {token_info['scope']}\")\n\n                return token_info\n            else:\n                print(\"Failed to get token info\")\n                return None\n        else:\n            print(\"Failed to extract authorization code from URL\")\n            return None\n    except Exception as e:\n        print(f\"Error during authorization: {e}\")\n        return None\n</code></pre>"},{"location":"reference/#get_access_token.main","title":"<code>main()</code>","text":"<p>Main function to handle token operations.</p> <p>Provides an interactive menu for managing Spotify API tokens including getting initial authorization, refreshing tokens, testing tokens, and obtaining client credentials tokens.</p> Source code in <code>scripts/get_access_token.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"Main function to handle token operations.\n\n    Provides an interactive menu for managing Spotify API tokens including\n    getting initial authorization, refreshing tokens, testing tokens, and\n    obtaining client credentials tokens.\n    \"\"\"\n\n    # Load users.json\n    config_path = os.path.join(os.path.dirname(__file__), \"..\", \"config\", \"users.json\")\n\n    try:\n        with open(config_path, \"r\") as f:\n            users = json.load(f)\n    except FileNotFoundError:\n        print(f\"Error: Could not find {config_path}\")\n        return\n    except json.JSONDecodeError as e:\n        print(f\"Error parsing users.json: {e}\")\n        return\n\n    print(\"=== Spotify Token Manager ===\")\n    print(\"1. Get initial authorization (new refresh token)\")\n    print(\"2. Refresh existing access token\")\n    print(\"3. Test access token\")\n    print(\"4. Get Client Credentials token (app-only)\")\n\n    choice = input(\"\\nSelect an option (1-4): \").strip()\n\n    if choice in [\"1\", \"2\", \"3\"]:\n        # List available users\n        print(\"\\nAvailable users:\")\n        for i, user in enumerate(users):\n            print(f\"{i + 1}. {user['username']}\")\n\n        try:\n            selection = input(\"\\nEnter the number of the user: \")\n            user_index = int(selection) - 1\n            if user_index &lt; 0 or user_index &gt;= len(users):\n                print(\"Invalid selection\")\n                return\n        except ValueError:\n            print(\"Invalid input\")\n            return\n\n        selected_user = users[user_index]\n        username = selected_user[\"username\"]\n        client_id = selected_user[\"client_id\"]\n        client_secret = selected_user[\"client_secret\"]\n        redirect_uri = selected_user[\"redirect_uri\"]\n        refresh_token = selected_user.get(\"refresh_token\", \"\")\n\n        # Validate credentials\n        if client_id.startswith(\"SPOTIFY_CLIENT_ID\") or client_secret.startswith(\n            \"SPOTIFY_CLIENT_SECRET\"\n        ):\n            print(\n                \"Error: Please update users.json with real \"\n                \"Spotify client credentials first\"\n            )\n            return\n\n    if choice == \"1\":\n        # Get initial authorization\n        token_info = get_initial_auth_for_user(\n            username, client_id, client_secret, redirect_uri\n        )\n        if token_info:\n            print(\"\\nUpdate users.json with this refresh token:\")\n            print(f\"Replace '{refresh_token}' with '{token_info['refresh_token']}'\")\n\n    elif choice == \"2\":\n        # Refresh existing token\n        if not refresh_token or refresh_token.startswith(\"SPOTIFY_REFRESH_TOKEN\"):\n            print(\n                \"Error: No valid refresh token found. \"\n                \"Use option 1 to get initial authorization first.\"\n            )\n            return\n\n        token_info = refresh_access_token(client_id, client_secret, refresh_token)\n        if token_info:\n            print(\"You can now use this access token for API calls.\")\n\n    elif choice == \"3\":\n        # Test access token\n        access_token = input(\"Enter the access token to test: \").strip()\n        test_access_token(access_token)\n\n    elif choice == \"4\":\n        # Get Client Credentials token\n        if len(users) &gt; 0:\n            user = users[0]  # Use first user's credentials\n            client_id = user[\"client_id\"]\n            client_secret = user[\"client_secret\"]\n\n            if client_id.startswith(\"SPOTIFY_CLIENT_ID\") or client_secret.startswith(\n                \"SPOTIFY_CLIENT_SECRET\"\n            ):\n                print(\n                    \"Error: Please update users.json with real \"\n                    \"Spotify client credentials first\"\n                )\n                return\n\n            token_info = get_client_credentials_token(client_id, client_secret)\n            if token_info:\n                print(f\"Access Token: {token_info['access_token'][:20]}...\")\n        else:\n            print(\"No users found in config\")\n\n    else:\n        print(\"Invalid choice\")\n</code></pre>"},{"location":"reference/#get_access_token.refresh_access_token","title":"<code>refresh_access_token(client_id, client_secret, refresh_token)</code>","text":"<p>Refresh an access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Spotify app client ID.</p> required <code>client_secret</code> <code>str</code> <p>Spotify app client secret.</p> required <code>refresh_token</code> <code>str</code> <p>Valid refresh token to use for getting new access token.</p> required <p>Returns:</p> Type Description <code>Optional[Dict]</code> <p>Refreshed token info dictionary if successful, None otherwise.</p> Source code in <code>scripts/get_access_token.py</code> <pre><code>def refresh_access_token(\n    client_id: str, client_secret: str, refresh_token: str\n) -&gt; Optional[Dict]:\n    \"\"\"Refresh an access token using a refresh token.\n\n    Args:\n        client_id: Spotify app client ID.\n        client_secret: Spotify app client secret.\n        refresh_token: Valid refresh token to use for getting new access token.\n\n    Returns:\n        Refreshed token info dictionary if successful, None otherwise.\n    \"\"\"\n    sp_oauth = SpotifyOAuth(\n        client_id=client_id,\n        client_secret=client_secret,\n        redirect_uri=\"http://127.0.0.1:8080/callback\",  # Dummy URI for refresh\n        cache_path=None,\n    )\n\n    try:\n        # Create a token info dict with the refresh token\n        # token_info = {\n        #     \"refresh_token\": refresh_token,\n        #     \"access_token\": \"dummy\",  # Will be refreshed\n        #     \"expires_at\": 0,  # Expired, will trigger refresh\n        # }\n\n        # Refresh the token\n        refreshed_token_info = sp_oauth.refresh_access_token(refresh_token)\n\n        if refreshed_token_info:\n            print(\"Access token refreshed successfully!\")\n            print(f\"New Access Token: {refreshed_token_info['access_token'][:20]}...\")\n            print(f\"Expires at: {refreshed_token_info['expires_at']}\")\n\n            return refreshed_token_info\n        else:\n            print(\"Failed to refresh access token\")\n            return None\n\n    except Exception as e:\n        print(f\"Error refreshing token: {e}\")\n        return None\n</code></pre>"},{"location":"reference/#get_access_token.test_access_token","title":"<code>test_access_token(access_token)</code>","text":"<p>Test if an access token works by making a simple API call.</p> <p>Parameters:</p> Name Type Description Default <code>access_token</code> <code>str</code> <p>Access token to test.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the token is valid and works, False otherwise.</p> Source code in <code>scripts/get_access_token.py</code> <pre><code>def test_access_token(access_token: str) -&gt; bool:\n    \"\"\"Test if an access token works by making a simple API call.\n\n    Args:\n        access_token: Access token to test.\n\n    Returns:\n        True if the token is valid and works, False otherwise.\n    \"\"\"\n    try:\n        sp = spotipy.Spotify(auth=access_token)\n        user_info = sp.current_user()\n        print(\n            f\"Token test successful! User: {user_info['display_name']}\"\n            f\"(ID: {user_info['id']})\"\n        )\n        return True\n    except Exception as e:\n        print(f\"Token test failed: {e}\")\n        return False\n</code></pre>"},{"location":"reference/#auth-validator","title":"Auth validator","text":"<p>Simple authentication validation script for Spotify users.</p>"},{"location":"reference/#auth_validator.validate_user_auth","title":"<code>validate_user_auth(username)</code>","text":"<p>Validate authentication for a specific user and fetch their profile info.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to validate authentication for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if authentication is successful, False otherwise.</p> Source code in <code>scripts/auth_validator.py</code> <pre><code>def validate_user_auth(username: str) -&gt; bool:\n    \"\"\"Validate authentication for a specific user and fetch their profile info.\n\n    Args:\n        username: The username to validate authentication for.\n\n    Returns:\n        True if authentication is successful, False otherwise.\n    \"\"\"\n\n    # Load users.json\n    script_dir = Path(__file__).resolve().parent.parent\n    config_path = script_dir / \"config\" / \"users.json\"\n\n    try:\n        with open(config_path, \"r\") as f:\n            users = json.load(f)\n    except Exception as e:\n        print(f\"Failed to load users from {config_path}: {e}\")\n        return False\n\n    # Find the user\n    user_creds = None\n    for user in users:\n        if user.get(\"username\") == username:\n            user_creds = user\n            break\n\n    if not user_creds:\n        print(f\"User '{username}' not found in users.json\")\n        print(f\"Available users: {[u.get('username') for u in users]}\")\n        return False\n\n    print(f\"Testing authentication for user: {username}\")\n    print(f\"Client ID: {user_creds['client_id']}\")\n    print(f\"Redirect URI: {user_creds['redirect_uri']}\")\n\n    # Check if refresh token is still a placeholder\n    if user_creds[\"refresh_token\"].startswith(\"SPOTIFY_REFRESH_TOKEN\"):\n        print(f\"\u274c Refresh token is still a placeholder: {user_creds['refresh_token']}\")\n        print(\n            \"Please run 'python scripts/get_access_token.py' \"\n            \"to get a real refresh token first.\"\n        )\n        return False\n\n    try:\n        # Authenticate using spotipy\n        spotify_client = authenticate_user(user_creds)\n        print(\"\u2705 Authentication successful!\")\n\n        # Test by getting user profile\n        user_profile = spotify_client.current_user()\n        print(\"\u2705 Profile retrieved successfully!\")\n        print(f\"   Display Name: {user_profile.get('display_name', 'N/A')}\")\n        print(f\"   Spotify ID: {user_profile.get('id', 'N/A')}\")\n        print(f\"   Followers: {user_profile.get('followers', {}).get('total', 'N/A')}\")\n        print(f\"   Country: {user_profile.get('country', 'N/A')}\")\n\n        # Test fetching recently played tracks\n        print(\"\\n\ud83c\udfb5 Testing recently played tracks retrieval...\")\n        recent_tracks = spotify_client.current_user_recently_played(limit=3)\n\n        if recent_tracks[\"items\"]:\n            print(\"\u2705 Recently played tracks retrieved successfully!\")\n            print(f\"   Found {len(recent_tracks['items'])} tracks:\")\n            for i, item in enumerate(recent_tracks[\"items\"][:3], 1):\n                track = item[\"track\"]\n                artists = \", \".join([artist[\"name\"] for artist in track[\"artists\"]])\n                print(f\"   {i}. {track['name']} by {artists}\")\n        else:\n            print(\n                \"\u26a0\ufe0f  No recently played tracks found \"\n                \"(this is normal if you haven't listened to music recently)\"\n            )\n\n        return True\n\n    except SpotifyAuthError as e:\n        print(f\"\u274c Authentication failed: {e}\")\n        return False\n    except Exception as e:\n        print(f\"\u274c Unexpected error: {e}\")\n        return False\n</code></pre>"},{"location":"setup/","title":"Spoteamfy Setup Guide","text":"<p>Quick setup to get Spotify tokens and configure users for the Teams utility.</p>"},{"location":"setup/#1-create-spotify-app","title":"1. Create Spotify App","text":"<ol> <li>Go to Spotify Developer Dashboard</li> <li>Create a new app</li> <li>Copy your Client ID and Client Secret</li> <li>Add redirect URI: <code>http://127.0.0.1:8080/callback</code></li> </ol>"},{"location":"setup/#2-configure-usersjson","title":"2. Configure users.json","text":"<p>Edit <code>config/users.json</code>:</p> <pre><code>[\n  {\n    \"username\": \"your-name\",\n    \"client_id\": \"your-spotify-client-id\",\n    \"client_secret\": \"your-spotify-client-secret\",\n    \"redirect_uri\": \"http://127.0.0.1:8080/callback\",\n    \"refresh_token\": \"PLACEHOLDER_WILL_BE_REPLACED\"\n  }\n]\n</code></pre>"},{"location":"setup/#3-get-refresh-token","title":"3. Get Refresh Token","text":"<p>Run the token script:</p> <pre><code>python scripts/get_access_token.py\n</code></pre> <ol> <li>Select option 1 (Get initial authorization)</li> <li>Choose your user</li> <li>Open the Spotify URL in your browser</li> <li>Authorize the app</li> <li>Copy the full redirect URL and paste it back</li> <li>Update your <code>refresh_token</code> in users.json with the returned value</li> </ol>"},{"location":"setup/#4-set-environment-variables-optional","title":"4. Set Environment Variables (Optional)","text":"<p>Create a <code>.env</code> file for easier testing:</p> <pre><code>WEBHOOK_URL=https://your-teams-webhook-url\nUSERS_JSON_PATH=/path/to/your/users.json  # Optional, defaults to ./config/users.json\n</code></pre>"},{"location":"setup/#5-test-setup","title":"5. Test Setup","text":"<p>Validate authentication:</p> <pre><code>python scripts/auth_validator.py username\n</code></pre>"},{"location":"setup/#6-run-the-cli","title":"6. Run the CLI","text":"<p>With webhook in .env:</p> <pre><code>python spoteamfy/src/cli.py --num-tracks 5\n</code></pre> <p>Or specify webhook directly:</p> <pre><code>python spoteamfy/src/cli.py --teams-webhook \"YOUR_WEBHOOK_URL\" --num-tracks 5\n</code></pre> <p>That's it! The utility will fetch recently played tracks and post them to Teams.</p>"}]}